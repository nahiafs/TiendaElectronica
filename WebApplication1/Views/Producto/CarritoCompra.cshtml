@model List<MusicaLMFL.Models.TProducto>
@{
    ViewBag.Title = "CarritoCompra";
    Layout = "~/Views/Plantilla/Plantilla.cshtml";
}

<h2>Carrito de la compra</h2>

<br/>

<div id="form-main">
    <ul id="myList">
        @foreach (var producto in Model)
        {
        <li id="@producto.CodProducto">
            @producto.Nombre
            <button class="btn btn-primary">
                @Ajax.ActionLink("Añadir al carrito", "obtenerProducto", "Producto", new { CodProducto = @producto.CodProducto }, new AjaxOptions()
                {
                    HttpMethod = "POST",
                    OnSuccess = "success",
                }, new { @style = "color:white; text-decoration:none;" })
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-cart" viewBox="0 0 16 16">
                    <path d="M0 1.5A.5.5 0 0 1 .5 1H2a.5.5 0 0 1 .485.379L2.89 3H14.5a.5.5 0 0 1 .491.592l-1.5 8A.5.5 0 0 1 13 12H4a.5.5 0 0 1-.491-.408L2.01 3.607 1.61 2H.5a.5.5 0 0 1-.5-.5zM3.102 4l1.313 7h8.17l1.313-7H3.102zM5 12a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm7 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm-7 1a1 1 0 1 1 0 2 1 1 0 0 1 0-2zm7 0a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
                </svg>
            </button>
        </li>
        }
    </ul>

</div>

<div class="container">
    <div class="row">
        <main id="items" class="col-sm-8 row"></main>
        <aside class="col-sm-4">
            <h2>Carrito</h2>
            <ul id="carrito" class="list-group"></ul>
            <hr>
            <p class="text-right">Total: <span id="total"></span>&euro;</p>
        </aside>
        <p class="text-right">Mensaje: <span id="mensaje"></span></p>
    </div>
</div>

<script>
    let $items = document.querySelector('#items');
    //let carrito = [];
    let total = 0;
    let $carrito = document.querySelector('#carrito');
    let $total = document.querySelector('#total');
    let $mensaje = document.querySelector('#mensaje');

    //*********************  ATENCIÓN A LAS SIGUIENTES DOS LÍNEAS ************************
    // En versiones anteriores no fue necesario declarar carrito. Ahora es necesario
    // Se indica por si se produjese algún error y poder seguirlo si se produce por esta
    // circunstancia, aunque la mejor manera es la declaración de let carrito.
    // Si se corrompe la variable carrito, es decir que es usada por otra aplicación,
    // dará problemas nuestra aplicación pues manejará datos no correctos.
    // Para que no se produzca el error habría que borrar el localstorage puesto que tiene
    // elementos corruptos. ESTO HAY QUE SEGUIR TRABAJANDOLO para encontrar la mejor manera
    // de usarlo o utilizar Sessionstorage.
    let carrito;

    // Tenemos que poner estas comprobaciones para que funcione la recuperación
    // del carro en el localStorage
    if (localStorage.carrito !== undefined)
        carrito = JSON.parse(localStorage.carrito);
    if (carrito === undefined)
        carrito = []
    else
    {
        renderizarCarrito(carrito);
        calcularTotal(carrito);
    }

    //*************************************************
    // Funciones
    //*************************************************
    function anyadirCarrito(dato) {
        // Anyadimos el Nodo a nuestro carrito
        //carrito.push(this.getAttribute('marcador'))
        carrito.push(dato);
        // Calculo el total
        calcularTotal(carrito);
        // Renderizamos el carrito
        renderizarCarrito(carrito);
    }

    function renderizarCarrito(carrito) {
        // Vaciamos todo el html
        $carrito.textContent = '';
        // Generamos los Nodos a partir de carrito
        var indice=0;
        for (let miItem of carrito)
        {
            //carrito.forEach(function (item, indice) {
            // Obtenemos el item que necesitamos de la variable base de datos
            //let miItem = baseDeDatos.filter(function (itemBaseDatos) {
            //    return itemBaseDatos['CodLibro'] == item;
            //});
            // Creamos el nodo del item del carrito
            let miNodo = document.createElement('li');
            miNodo.classList.add('list-group-item', 'text-right');
            //miNodo.textContent = miItem['Titulo'] - miItem['Precio'];
                //miNodo.textContent = miItem['Titulo'];

            //miNodo.textContent = `${miItem[0]['Titulo']}`;
            miNodo.textContent =`${miItem[0]['Nombre']} - ${miItem[0]['Precio']}€`
            // Boton de borrar
            let miBoton = document.createElement('button');
            miBoton.classList.add('btn', 'btn-danger', 'mx-5');
            miBoton.textContent = 'X';
            miBoton.setAttribute('posicion', indice);
            indice=indice+1;
            miBoton.addEventListener('click', borrarItemCarrito);
            // Mezclamos nodos
            miNodo.appendChild(miBoton);
            $carrito.appendChild(miNodo);
        }
    }

    function borrarItemCarrito() {
        // Obtenemos la posicion que hay en el boton pulsado
        let posicion = this.getAttribute('posicion');
        // Borramos la posicion que nos interesa
        carrito.splice(posicion, 1);
        // volvemos a renderizar
        //********************************************************************************************
        //Borramos el carro de la compra cada vez que borramos uno de los item.
        //Volvemos a crear el carro con los elementos restantes del array carrito, guardándolo en
        //localStorage.
        //********************************************************************************************
        localStorage.removeItem("carrito");
        localStorage.carrito = JSON.stringify(carrito);
        renderizarCarrito(carrito);
        // Calculamos de nuevo el precio
        calcularTotal(carrito);
    }

    function calcularTotal(carrito) {
        // Limpiamos precio anterior
        total = 0;
        // Recorremos el array del carrito
        for (let miItem of carrito) {
            total = total + parseInt(miItem[0]['Precio']);
        }
        // Formateamos el total para que solo tenga dos decimales
        let totalDosDecimales = total.toFixed(2);
        // Renderizamos el precio en el HTML
        $total.textContent = totalDosDecimales;
    }

    function success(data) {
        console.log(data.Nombre);
        anyadirCarrito(data);
        localStorage.carrito=JSON.stringify(carrito);
    }

    function comprar() {
        var uri = '@Url.Action("comprar", "Libro")';
        var lineas = lineasFactura(carrito);
        //EN ESTE APARTADO CUANDO LA COMPRA SEA CORRECTA SE SACARÁ MENSAJE INFORMATIVO Y SE BORRARÁ EL CARRITO
        //DE localStorage.
        $.ajax({
            url: uri,
            data: JSON.stringify(lineas),
            type: 'POST',
            success:exito,
            contentType: 'application/json'
        });
    }

    function exito(data) {
        // Esta función se ejecuta cuando la petición AJAX ha tenido éxito visualizando el mensaje en html.
        $mensaje.textContent = data;
        // Se realiza el borrado del carrito del almacén local una vez que la compra ha tenido éxito.
        localStorage.removeItem("carrito");
    }

    function lineasFactura(carrito)
    {
        // Creamos un array vacío
            var lineas = [];
        // Creamos un objeto vacío
            var lf = {};
        //*********************************** CODIGO 1 *********************************************
        //Proceso de carga de las lineas de factura con un FOR
        //Ponemos el CodFactura a mano pero seguramente este código se generará en el back-end
        //La cantaidad y el Total hay que realizar el proceso para automatizarlos. En estos momentos
        //se pone un número fijo al igual que hacemos con CodFactura.
        for (let miItem of carrito) {
            //Inicializamos el objeto cada vuelta de bucle, puesto que si no los hacemos,
            // todos los objetos del array lineas cogen los valores del último objeto tratado.
            lf = {};
            lf.CodFactura = 'Cod021';
            lf.Libro = miItem[0].CodLibro;
            lf.Cantidad = 2;
            lf.Total = 200;
            lineas.push(lf);
        }
        return lineas;
    }
</script>
